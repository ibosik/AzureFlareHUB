
getgenv().temptable = {
    version = "1.3.1",
}

getgenv().kocmoc = {
    toggles = {
    	["AntiAfk"]=false;
    	["AutoTP"]=false;
    	["AutoMakeGold"]=false;
    	["AutoMakeRainbow"]=false;
    	["AutoCollectLoot"]=false;
    	["AutoMerchant"]=false;
    	["AutoHatch"]=false;
    	["AutoTripleDamage"]=false;
    	["AutoTripleCoins"]=false;
    	["AutoSuperLucky"]=false;
    	["AutoUltraLucky"]=false;
    },
    vars = {
        
    }
}

--/--/--/--/--/--/--/ variables --/--/--/--/--/--/--/

local Player = game:GetService("Players").LocalPlayer
local Character = Player.Character or Player:WaitForCharacter()
local Humanoid = Character:WaitForChild("Humanoid")
local HumaoidRP = Character:WaitForChild("HumanoidRootPart")
local UIS = game:GetService("UserInputService")
local Mouse = Player:GetMouse()
local NotifEvent = game:GetService("ReplicatedStorage").Framework.Modules["2 | Network"]["admin cmds notification"]
local Popup = game:GetService("ReplicatedStorage").Framework.Modules["2 | Network"]["send message"];
local UIList = {
["Golden"] = "Golden Machine";
["Rainbow"] = "Rainbow Machine";
["FusePets"] = "Fusing";
["DarkMatter"] = "Dark Matter Machine";
["EnchantPets"] = "Enchant Pets";
["Merchant"] = "Merchant Shop";
["Inventory"] = nil;
["Trading"] = "Trade Manager";
["TwitterCodes"] = "Codes";
["Upgrades"] = "Upgrade Dashboard";
["Teleport"] = "Teleports";
["Achievements"] = nil;
["Collection"] = "Pet Collection";
["Settings"] = "Game Settings"
}
local RainbowMachineInfo = game:GetService("Workspace")["__THINGS"]["__REMOTES"]["get rainbow machine info"]:InvokeServer({})
local GoldenmachineInfo = game:GetService("Workspace")["__THINGS"]["__REMOTES"]["get golden machine info"]:InvokeServer({})
local goldenMergeNum = 5
local rainbowMergeNumber = 5
local PetDatabase = require(game:GetService("ReplicatedStorage").Framework.Modules["1 | Directory"].Pets["Grab All Pets"])
local TempPetDropdownDataBase = {}
local SelectedEgg = "Cracked Egg"
local LootbagsDropdown = {}
local currncydropdown = {"Coins","Tech Coins","Fantasy Coins","Diamonds","Halloween Candy","Gingerbread"}
local SelectedChestToFarm = "999999999"
local gameLib = require(game.ReplicatedStorage:WaitForChild("Framework"):WaitForChild("Library"));
local lib = require(game.ReplicatedStorage:WaitForChild("Framework"):WaitForChild("Library"));
local TapTime = .2
local Tapped = false
local Toggle = false
local FlyForce = 75
local Maxmagnitude = 120
local Stop = true
local CandyCaneStop = true
local Speed = 50
local AutofarmChestsAlso = false
local LegitFarmCoins = false
Config = getgenv().kocmoc.toggles
local notif = game:GetService("ReplicatedStorage").Framework.Modules["2 | Network"].notification

--/--/--/--/--/--/--/--/--/--/--/--/--/--/--/--/--/
--/--/--/--/--/--/--/ functions --/--/--/--/--/--/--/

local funcs = {}

local function loadRemoteEvent(name)
    local Event = game:GetService("Workspace")["__THINGS"]["__REMOTES"]:FindFirstChild("MAIN")
    if Event ~= nil then
        Event:FireServer("b",name)
    else
        Player:Kick("A critical error occoured, please contact Boxking776#0001 with this message: \nERR_MAIN_REMOTE_EVENT_DOES_NOT_EXIST")
    end
end

local function loadRemoteFunc(name)
    local Event = game:GetService("Workspace")["__THINGS"]["__REMOTES"]:FindFirstChild("MAIN")
    if Event ~= nil then
        Event:FireServer("a",name)
    else
        Player:Kick("A critical error occoured, please contact Boxking776#0001 with this message: \nERR_MAIN_REMOTE_EVENT_DOES_NOT_EXIST")
    end
end

local function Post(Text)
	NotifEvent:Fire(Text)
end

local function PostError(ErrMessage)
	Post(ErrMessage.." | "..tostring(Errs[ErrMessage]))
end

local ConsideringPosting = false
local Delay = 1.5

local function DelayedPost(w)
	if ConsideringPosting == false then
		ConsideringPosting = true
		wait(Delay)
		ConsideringPosting = false
		local ValuetoSend = tostring(Character.Humanoid[w])
		local NewText = "Set "..w.." to "..ValuetoSend
		wait()
		Post(NewText)
	end
end

local function TogglePost(Toggle,Bool)
	local toPost = "Error generating message"
	if Bool == true then
		toPost = "Enabled "..Toggle
	else
		toPost = "Disabled "..Toggle
	end
	Post(toPost)
end

local function ToggleUI(UI)
	local UIObject = Player.PlayerGui:FindFirstChild(UI)
	if UIObject ~= nil then
		if UIObject.Enabled ~= true then
			UIObject.Enabled = true
		else
		--Post("Already Open")
		UIObject.Enabled = false
		end
	else
	PostError("ERR1")
	end
end

local function getPetDataFromId(id)
	local PetReturn = nil
        for i,v in pairs(PetDatabase) do
            if i == tostring(id) then
                PetReturn = v
            end
        end
return PetReturn
end

local function GetMyPets()
local PlrPetInfo = game:GetService("Workspace")["__THINGS"]["__REMOTES"]["get stats"]:InvokeServer({})[1]["Pets"]
warn("lol")
warn(game.HttpService:JSONEncode(PlrPetInfo))
return PlrPetInfo
end

local function getPetInfoFromHash(shash)
	local PlayerStats = game:GetService("Workspace")["__THINGS"]["__REMOTES"]["get stats"]:InvokeServer({})[1]
	local Pets = PlayerStats["Pets"]
	local found = false
	local info = nil
	for i,v in pairs(Pets) do
		if v["uid"] == shash then
			found = true
			info = v
		end
	end
	if found == false then warn("pet not found") end
	return info
end

local function getAllNormalPets()
	local regPets = {}
	local Pets = game:GetService("Workspace")["__THINGS"]["__REMOTES"]["get stats"]:InvokeServer({})[1]["Pets"]
	print(game.HttpService:JSONEncode(Pets))
    for i,v in pairs(Pets) do
        local isRainbow = v["r"]
        local isGold = v["g"]
        local isDM = v["dm"]
        local petId = v["uid"]
        local petnameid = v["id"]
        if isDM == nil and isGold == nil and isDM == nil and isRainbow == nil then
            print(petnameid)
            local data = getPetDataFromId(petnameid)
            print(data)
            table.insert(regPets,{petId,data["name"]})
        end
    end
	return regPets
end

local function getAllGoldenPets()
	local regPets = {}
	local Pets = game:GetService("Workspace")["__THINGS"]["__REMOTES"]["get stats"]:InvokeServer({})[1]["Pets"]
	print(game.HttpService:JSONEncode(Pets))
    for i,v in pairs(Pets) do
        local isRainbow = v["r"]
        local isGold = v["g"]
        local isDM = v["dm"]
        local petId = v["uid"]
        local petnameid = v["id"]
        if isDM == nil and isGold == true and isDM == nil then
            print(petnameid)
            local data = getPetDataFromId(petnameid)
            print(data)
            table.insert(regPets,{petId,data["name"]})
        end
    end
	return regPets
end

local function MakePetsGold(isauto)
    local suc,err = pcall(function()
	local regPetsList = getAllNormalPets()
	local tempAmtList = {}
	
	for i,v in pairs(regPetsList) do
	    local petName = v[2]
	    local petId = v[1]
	    
	    local CountCheck = tempAmtList[petName]
	    if CountCheck == nil then
	        tempAmtList[petName] = 1
	    else
	        tempAmtList[petName] = tempAmtList[petName] + 1
	   end
	end
	
	for i,v in pairs(tempAmtList) do
	    if v >= goldenMergeNum then
	        warn(i.." can be merged")
	        local Table = {}
	        for count = 1, goldenMergeNum do
	            local num = 0
	            for e,k in pairs(regPetsList) do
	                num = num + 1
	                petName = k[2]
	                petId = k[1]
	                if petName == tostring(i) then
	                    table.insert(Table,petId)
	                    table.remove(regPetsList,num)
	                end
	            end
	        end
            local isSuccess = workspace.__THINGS.__REMOTES:FindFirstChild("use golden machine"):InvokeServer({Table})
            wait(2)
            if isSuccess[1] == nil then
                Post("Failed "..i.." Merge")
            else
                Post("Merged "..i)
            end
	    end
	end
    end)
if not suc then Post(tostring(err)) end
end

local function MakePetsRainbow(isauto)
    local suc,err = pcall(function()
	local regPetsList = getAllGoldenPets()
	local tempAmtList = {}
	
	for i,v in pairs(regPetsList) do
	    local petName = v[2]
	    local petId = v[1]
	    
	    local CountCheck = tempAmtList[petName]
	    if CountCheck == nil then
	        tempAmtList[petName] = 1
	    else
	        tempAmtList[petName] = tempAmtList[petName] + 1
	   end
	end
	
	for i,v in pairs(tempAmtList) do
	    if v >= rainbowMergeNumber then
	        warn(i.." can be merged")
	        local Table = {}
	        for count = 1, rainbowMergeNumber do
	            local num = 0
	            for e,k in pairs(regPetsList) do
	                num = num + 1
	                petName = k[2]
	                petId = k[1]
	                if petName == tostring(i) then
	                    table.insert(Table,petId)
	                    table.remove(regPetsList,num)
	                end
	            end
	        end
            local isSuccess = workspace.__THINGS.__REMOTES:FindFirstChild("use rainbow machine"):InvokeServer({Table})
            if isSuccess[1] == nil then
                Post("Failed "..i.." Merge")
            else
                Post("Merged "..i)
            end
	    end
	end
    end)
if not suc then Post(tostring(err)) end
end

local function doespetexist(pet)
    local newpet = string.upper(pet)
    local info = {false,nil}
    for i,v in pairs(PetDatabase) do
        local name = string.upper(v["name"])
        if name == newpet then
            info = {true,v["name"]}
        end
    end
    return info
end

function HatchEgg(Pet)
   local pet = Pet
   for i,v in pairs(game.ReplicatedStorage.Game.Pets:GetChildren()) do
       if string.split(tostring(v), ' - ')[2] == pet then
           pet = string.split(tostring(v), ' - ')[1]
       end
   end
   local tbl = {
       {
       nk = 'Preston',
       idt = '69',
       e = false,
       uid = '69',
       s = 999999999999,
       id = pet,
   }}
   local egg
   for i_,script in pairs(game.ReplicatedStorage.Game.Eggs:GetDescendants()) do
       if script:IsA('ModuleScript') then
           if typeof(require(script).drops) == 'table' then
               for i,v in pairs(require(script).drops) do
                   if v[1] == pet then
                       egg = require(script).displayName
                   end
               end
           end
       end
   end
   if egg == nil then egg = 'Cracked Egg' end
   for i,v in pairs(getgc(true)) do
       if (typeof(v) == 'table' and rawget(v, 'OpenEgg')) then
           if egg ~= nil then
           v.OpenEgg(egg, tbl)
           else
               warn("no")
           end
       end
   end
end

local function StartHatch(pet)
    local infos = doespetexist(pet)
    local doesexist = infos[1]
    local fullname = infos[2]
    if doesexist == true then
        HatchEgg(fullname)
    else
        Post("Pet does not exist")
    end
end

local function fetchBank()
    local Banks = workspace.__THINGS.__REMOTES:FindFirstChild("get my banks"):InvokeServer({})
    local bank = nil
    for i,v in pairs(Banks[1]) do
    if v["BUID"] ~= nil then
    if v["Owner"] == Player.UserId then
        bank = v["BUID"]
    end
    end
    end
    return bank
end

function FarmCoin(CoinID, PetID)
   game.workspace['__THINGS']['__REMOTES']["join coin"]:InvokeServer({[1] = CoinID, [2] = {[1] = PetID}})
   game.workspace['__THINGS']['__REMOTES']["farm coin"]:FireServer({[1] = CoinID, [2] = PetID})
end

local stats076gyfuoyh = game:GetService("Workspace")["__THINGS"]["__REMOTES"]["get stats"]:InvokeServer({})[1]
local maxEquippedougfgf = stats076gyfuoyh["MaxEquipped"]

function legitFarmCoin(CoinID, Pets)
local petsTable = Pets
local SINSIANCE = workspace.__THINGS.Coins:FindFirstChild(CoinID)
if SINSIANCE ~= nil then
local petsFolder = SINSIANCE["Pets"]
local petsOn = 0
for i,v in pairs(petsTable) do
    if petsFolder:FindFirstChild(v) then
        petsOn = petsOn + 1
    end
end
if tonumber(petsOn) ~= tonumber(maxEquippedougfgf) then
lib.Signal.Fire("Group Select Coin",SINSIANCE)
end
end
end

function legitFarm1Coin(CoinID, Pet)
local SINSIANCE = workspace.__THINGS.Coins:FindFirstChild(CoinID)
if SINSIANCE ~= nil then
lib.Signal.Fire("Select Coin",SINSIANCE,Pet)
end
end

function GetMyPets()
   local returntable = {}
   for i,v in pairs(game:GetService("Players").LocalPlayer.PlayerGui.Inventory.Frame.Main.Pets:GetChildren()) do
       if v.ClassName == 'TextButton' and v.Equipped.Visible then
           table.insert(returntable, v.Name)
       end
   end
   return returntable
end

function GetCoins()
   local returntable = {}
   local Num = #GetMyPets()
   local CoinsF = game:GetService("Workspace")["__THINGS"].Coins
   for i = 1,Num do
       returntable["Number"..tostring(i)] = {0,"1"}
   end
   for i,v in pairs(CoinsF:GetChildren()) do
        local M = v:FindFirstChild("Coin")
        if M then
            if M.TextureID ~= "rbxassetid://8269538491" then
            local mag = (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - M.Position).magnitude
            if mag <= Maxmagnitude then
                if M:FindFirstChild("Particles") then
                    if AutofarmChestsAlso == true then
                    for p = 1,Num do
                    local PrevMValue = returntable["Number"..tostring(p)][1]
                    if PrevMValue < mag then
                        returntable["Number"..tostring(p)] = {mag,v.Name}
                        break
                    end
                end
                end
                else
                for p = 1,Num do
                    local PrevMValue = returntable["Number"..tostring(p)][1]
                    if PrevMValue < mag then
                        returntable["Number"..tostring(p)] = {mag,v.Name}
                        break
                    end
                end
                end
            end
        end
    end
end
return returntable
end


function GetCandyCanes()
   local returntable = {}
   local Num = #GetMyPets()
   local CoinsF = game:GetService("Workspace")["__THINGS"].Coins
   for i = 1,Num do
       returntable["Number"..tostring(i)] = {0,"1"}
   end
   for i,v in pairs(CoinsF:GetChildren()) do
        local M = v:FindFirstChild("Coin")
        if M then
            if M.TextureID == "rbxassetid://8269538491" then
            local mag = (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - M.Position).magnitude
            if mag <= Maxmagnitude then
                if not M:FindFirstChild("Particles") then
                for p = 1,Num do
                    local PrevMValue = returntable["Number"..tostring(p)][1]
                    if PrevMValue < mag then
                        returntable["Number"..tostring(p)] = {mag,v.Name}
                        break
                    end
                end
                end
            end
        end
    end
end
return returntable
end

function CollectOrbs()
   local ohTable1 = {[1] = {}}
   for i,v in pairs(game.workspace['__THINGS'].Orbs:GetChildren()) do
       ohTable1[1][i] = v.Name
   end
   game.workspace['__THINGS']['__REMOTES']["claim orbs"]:FireServer(ohTable1)
end

local function BuyMerchantPets()
local t = game:GetService("Workspace")["__THINGS"]["__REMOTES"]["get merchant items"]:InvokeServer({})[1]
local num = 0
for i,v in pairs(t) do
    num = num + 1
    for k = 1,v["left"] do
        warn("BUYING")
        workspace.__THINGS.__REMOTES:FindFirstChild("buy merchant item"):InvokeServer({num})
    end
end
end

local random = Random.new()
local letters = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'}
local player = game:GetService("Players").LocalPlayer
if _G.AdditionalCoins == nil then
_G.AdditionalCoins = 0
end

function getRandomLetter()
	return letters[random:NextInteger(1,#letters)]
end

function getRandomString(length, includeCapitals)
	local length = length or 10
	local str = ''
	for i=1,length do
		local randomLetter = getRandomLetter()
		if includeCapitals and random:NextNumber() > .5 then
			randomLetter = string.upper(randomLetter)
		end
		str = str .. randomLetter
	end
	return str
end

local function SummonGift(Type)
local s = game:GetService("Workspace")["__THINGS"]["__REMOTES"]["get stats"]:InvokeServer({})[1]
local nigerbread = s["Gingerbread"]
local World = s["World"]
local sussynum = math.random(20000,100000)
local ohString1 = getRandomString(32, true)
local ohTable3 = {
	["type"] = Type,
	["claimed"] = false,
	["position"] = player.Character.HumanoidRootPart.Position,
	["world"] = World,
	["player"] = player,
	["reward"] = {
		[1] = "Gingerbread",
		[2] = sussynum
	}
}

game:GetService("ReplicatedStorage").Framework.Modules["2 | Network"]["spawn lootbag"]:Fire(ohString1, ohTable3)
game:GetService("Workspace")["__THINGS"].Lootbags.ChildRemoved:Connect(function(instance)
if instance.Name == ohString1 then
local ohTable2 = {
	["type"] = "Gingerbread",
	["plr"] = game:GetService("Players").LocalPlayer,
	["pos"] = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position + Vector3.new(0,5,0),
	["am"] = sussynum
}

game:GetService("ReplicatedStorage").Framework.Modules["2 | Network"]["orb added"]:Fire(getRandomString(32, true), ohTable2)

_G.AdditionalCoins = (_G.AdditionalCoins + sussynum) * mult

local ohTable1 = {
    ["Gingerbread"] = nigerbread + _G.AdditionalCoins
}
local ohInstance2 = player
game:GetService("ReplicatedStorage").Framework.Modules["2 | Network"]["new stats"]:Fire(ohTable1, ohInstance2)
end
end)

end

local function spawnFakeOrbs(currency,amt)

local randomnum = math.random(20,50)
local indivAmt = amt/randomnum

for i = 1,randomnum do
wait(0.05)
local ohTable2 = {
    ["type"] = currency,
    ["plr"] = game:GetService("Players").LocalPlayer,
    ["pos"] = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position + Vector3.new(0,5,0),
    ["am"] = indivAmt
}

game:GetService("ReplicatedStorage").Framework.Modules["2 | Network"]["orb added"]:Fire(getRandomString(32, true), ohTable2)
end
end

function getchest()
    for i,v in pairs(game:GetService("Workspace")["__THINGS"].Coins:GetDescendants()) do
        if v:IsA("MeshPart") then
            if (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - v.Position).magnitude < 750 then
            local val = (v.CFrame.X + v.CFrame.Y + v.CFrame.Z) 
            if (val-SelectedChestToFarm) < 5 and (val-SelectedChestToFarm) > -5 then
            print(v.Parent.Name)
            return v.Parent.Name
        end
end end
end 
end

local function shouldUseSelectedBoost(thing)
    local isthingylmao = false
    local boostPallette = game:GetService("Players").LocalPlayer.PlayerGui.Main.Boosts
    local boost = boostPallette:FindFirstChild(thing)
    if boost ~= nil then
    local timer = boost:FindFirstChild("TimeLeft")
    if timer ~= nil then
    if string.find(timer.Text,"00:00:") then
    isthingylmao = true
    end
    end
    else
    isthingylmao = true
    end
    return isthingylmao
end

--/--/--/--/--/--/--/--/--/--/--/--/--/--/--/--/--/
--/--/--/--/--/--/--/ preload --/--/--/--/--/--/--/

if workspace.__THINGS.__REMOTES:FindFirstChild("use golden machine") == nil then loadRemoteEvent("use golden machine") end
if workspace.__THINGS.__REMOTES:FindFirstChild("collect bank interest") == nil then loadRemoteEvent("collect bank interest") end
if workspace.__THINGS.__REMOTES:FindFirstChild("get rainbow machine info") == nil then loadRemoteEvent("get rainbow machine info") end
if workspace.__THINGS.__REMOTES:FindFirstChild("get golden machine info") == nil then loadRemoteEvent("get golden machine info") end
if workspace.__THINGS.__REMOTES:FindFirstChild("use golden machine") == nil then loadRemoteEvent("use golden machine") end
if workspace.__THINGS.__REMOTES:FindFirstChild("get my banks") == nil then loadRemoteEvent("get my banks") end
if workspace.__THINGS.__REMOTES:FindFirstChild("farm coin") == nil then loadRemoteFunc("farm coin") end
if workspace.__THINGS.__REMOTES:FindFirstChild("claim orbs") == nil then loadRemoteFunc("claim orbs") end
if workspace.__THINGS.__REMOTES:FindFirstChild("join coin") == nil then loadRemoteEvent("join coin") end
if workspace.__THINGS.__REMOTES:FindFirstChild("buy egg") == nil then loadRemoteEvent("buy egg") end
if workspace.__THINGS.__REMOTES:FindFirstChild("is merchant here") == nil then loadRemoteEvent("is merchant here") end
if workspace.__THINGS.__REMOTES:FindFirstChild("buy merchant item") == nil then loadRemoteEvent("buy merchant item") end
if workspace.__THINGS.__REMOTES:FindFirstChild("get merchant items") == nil then loadRemoteEvent("get merchant items") end
if workspace.__THINGS.__REMOTES:FindFirstChild("activate boost") == nil then loadRemoteFunc("activate boost") end
if workspace.__THINGS.__REMOTES:FindFirstChild("redeem rank rewards") == nil then loadRemoteEvent("redeem rank rewards") end
if workspace.__THINGS.__REMOTES:FindFirstChild("use rainbow machine") == nil then loadRemoteEvent("use rainbow machine") end
if workspace.__THINGS.__REMOTES:FindFirstChild("performed teleport") == nil then loadRemoteFunc("performed teleport") end

for i,v in pairs(require(game:GetService("ReplicatedStorage").Framework.Modules["1 | Directory"].Lootbags.Lootbags)) do
table.insert(LootbagsDropdown,tostring(i))
end

--/--/--/--/--/--/--/--/--/--/--/--/--/--/--/--/--/
